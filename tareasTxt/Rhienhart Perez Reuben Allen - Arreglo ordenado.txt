; Reuben Rhienhart - 20112048
; Sorting the array

org 100h

.data
array       db 6 dup(0)
msgWelcome  db 'Welcome to the array sorting program$'
msgWrite    db 'Write the numbers to the array (0-9): $'
msgSorted   db 'The sorted array: $'
msgExit     db 'Thanks for using the program$'

.code

;;;;;;;;;;;
; Welcome ;
;;;;;;;;;;;
welcome:
; Show the welcome message
mov ah, 09h
lea dx, msgWelcome
int 21h
; Line jump
mov ah, 02h
mov dl, 0Ah
int 21h

mov ah, 02h
mov dl, 0Dh
int 21h
; Prepare the index and counter
mov si, 0
mov cx, 6

;;;;;;;;;;;;;;;;;;;;;;
; Write to the array ;
;;;;;;;;;;;;;;;;;;;;;;
writeMsg:
; Show the message to write the numbers
mov ah, 09h
lea dx, msgWrite
int 21h

write:
; Get the number input from the user
mov ah, 01h
int 21h
; Adjust the number from ASCII to integer
sub al, 30h
; Store the number in the array if it's valid (0-9)
cmp al, 0
jl skipInput
cmp al, 9
jg skipInput
; Store the number in the array
mov array[si], al
inc si
dec cx
jmp checkInput

skipInput:
; If invalid input, do not decrement cx
checkInput:
; Print a space
mov ah, 02h
mov dl, 20h
int 21h

cmp cx, 0
jnz write

;;;;;;;;;;;;;;;
; Bubble sort ;
;;;;;;;;;;;;;;;
bubbleSort:
mov cx, 6          ; Number of elements
outerLoop:
mov si, 0          ; Reset index for inner loop
mov bp, cx         ; Set bp to the number of elements
dec bp             ; Last element to compare
innerLoop:
cmp si, bp         ; Check if si < bp
jge endInnerLoop   ; If si >= bp, exit inner loop
mov al, array[si]  ; Load current element
mov bl, array[si + 1] ; Load next element
cmp al, bl         ; Compare current and next
jbe nextIteration  ; If current <= next, no swap
; Swap elements
mov array[si], bl  ; Move next to current
mov array[si + 1], al ; Move current to next
nextIteration:
inc si             ; Move to the next element
jmp innerLoop      ; Repeat inner loop

endInnerLoop:
dec cx             ; Decrease the count of outer loop
jnz outerLoop      ; Repeat outer loop if not done

;;;;;;;;;;;;;;;;
; Print sorted ;
;;;;;;;;;;;;;;;;
printSorted:
; New line
mov ah, 02h
mov dl, 0Ah
int 21h

mov ah, 02h
mov dl, 0Dh
int 21h

; New line
mov ah, 02h
mov dl, 0Ah
int 21h

mov ah, 02h
mov dl, 0Dh
int 21h
; Show sorted message
mov ah, 09h
lea dx, msgSorted
int 21h
; Print sorted array
mov cx, 6          ; Number of elements
mov si, 0          ; Reset index

printSortedArray:
mov al, array[si]
add al, 30h
mov dl, al
mov ah, 02h
int 21h

; Print space
mov dl, 20h        ; Space character
int 21h
inc si             ; Move to the next element
dec cx
jnz printSortedArray ; Repeat if cx is not zero

;;;;;;;;
; Exit ;
;;;;;;;;
exit:
; New line
mov ah, 02h
mov dl, 0Ah
int 21h

mov ah, 02h
mov dl, 0Dh
int 21h
; Print exit msg
mov ah, 09h
lea dx, msgExit
int 21h
ret

; Main program flow
start:
call welcome       ; Call the welcome message
call writeMsg      ; Call to write numbers to the array
call bubbleSort    ; Call to sort the array
call printSorted   ; Call to print the sorted array
call exit          ; Call to exit the program
